name: Checks

permissions:
  contents: read

on:
  pull_request:
    branches-ignore:
      - 'release/**'
  merge_group:
    branches:
      - main

jobs:
  build:
    name: Build and test
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        include:
          - rust: "stable"
            target: "x86_64-unknown-linux-gnu"
            os: ubuntu-latest
            features: "--all-features"
          - rust: "msrv"
            target: "x86_64-unknown-linux-gnu"
            os: ubuntu-latest
            features: "--all-features"
          - rust: "stable"
            target: "x86_64-unknown-linux-musl"
            os: ubuntu-latest
            features: "--all-features"
          - rust: "stable"
            target: "aarch64-unknown-linux-gnu"
            os: ubuntu-latest
            features: "--all-features"
          - rust: "stable"
            target: "x86_64-unknown-linux-gnu"
            os: ubuntu-latest
            features: "--no-default-features --features=postgres"
          - rust: "stable"
            target: "x86_64-unknown-linux-gnu"
            os: ubuntu-latest
            features: "--no-default-features --features=postgres,internal-oauth"
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set target rust version
        run: echo "TARGET_RUST_VERSION=$(if [ "${{matrix.rust}}" = "msrv" ]; then grep rust-version Cargo.toml | grep MSRV | cut -d'"' -f2; else echo "${{matrix.rust}}"; fi)" >> $GITHUB_ENV

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@888c2e1ea69ab0d4330cbf0af1ecc7b68f368cc1
        with:
          toolchain: "${TARGET_RUST_VERSION}"
          targets: "${{ matrix.target }}"

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@0d2c6fcce937ba2ba77abf40e06449b74d60fa04 # v1.28.3
        with:
          target: ${{ matrix.target }}

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@2c41309d51ede152b6f2ee6bf3b71e6dc9a8b7df # v2.49.27
        with:
          tool: cargo-llvm-cov

      - name: Rust cache
        uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7
        with:
          shared-key: "${{matrix.rust}}-${{matrix.target}}"

      - name: Setup Postgres DB
        run: |
          docker compose up db --wait && \
          cargo install sqlx-cli --no-default-features --features rustls,postgres && \
          cargo sqlx migrate run --source openleadr-vtn/migrations && \
          psql -U openadr -W openadr -h localhost openadr < fixtures/test_user_credentials.sql

      - name: cargo build
        run: cargo build ${{ matrix.features }}

      - name: cargo test
        run: cargo llvm-cov --target ${{matrix.target}} ${{ matrix.features }} --lcov --output-path lcov.info
        env:
          RUST_BACKTRACE: 1

      - name: Bring Postgres DB down
        run: docker compose down

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@0565863a31f2c772f9f0395002a31e3f06189574 # v5.4.0
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      - name: Build Docker image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: ./vtn.Dockerfile
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  unused:
    name: Check unused dependencies
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install nightly toolchain
        uses: dtolnay/rust-toolchain@888c2e1ea69ab0d4330cbf0af1ecc7b68f368cc1
        with:
          toolchain: nightly

      - name: Install udeps
        uses: taiki-e/install-action@2c41309d51ede152b6f2ee6bf3b71e6dc9a8b7df # v2.49.27
        with:
          tool: cargo-udeps

      - name: cargo udeps
        run: cargo udeps --workspace --all-targets

  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@888c2e1ea69ab0d4330cbf0af1ecc7b68f368cc1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Check formatting
        run: cargo +nightly fmt --all --check -- --config imports_granularity="Crate"

  clippy:
    name: Clippy
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            use_zig: false
            zig_args: ""
          - target: aarch64-unknown-linux-gnu
            use_zig: true
            zig_args: "-target aarch64-linux-gnu -g"
          - target: armv7-unknown-linux-gnueabihf
            use_zig: true
            zig_args: "-target arm-linux-gnueabihf -mcpu=generic+v7a+vfp3-d32+thumb2-neon -g"
          - target: x86_64-unknown-linux-musl
            use_zig: true
            zig_args: "-target x86_64-linux-musl"
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@888c2e1ea69ab0d4330cbf0af1ecc7b68f368cc1
        with:
          toolchain: stable
          components: clippy
          targets: ${{matrix.target}}

      # Use zig as our C compiler for convenient cross-compilation. We run into rustls having a dependency on `ring`.
      # This crate uses C and assembly code, and because of its build scripts, `cargo clippy` needs to be able to compile
      # that code for our target.
      - uses: goto-bus-stop/setup-zig@abea47f85e598557f500fa1fd2ab7464fcb39406 # v2.2.1
        with:
          version: 0.9.0
        if: ${{matrix.use_zig}}

      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@2c41309d51ede152b6f2ee6bf3b71e6dc9a8b7df # v2.49.27
        with:
          tool: cargo-zigbuild
        if: ${{matrix.use_zig}}

      - name: Set TARGET_CC for zig
        run: echo "TARGET_CC=/home/runner/.cargo/bin/cargo-zigbuild zig cc -- ${{matrix.zig_args}}" >> $GITHUB_ENV
        if: ${{matrix.use_zig}}

      - name: Rust cache
        uses: Swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3 # v2.7.7
        with:
          shared-key: "stable-${{matrix.target}}"

      - name: Run clippy
        run: cargo clippy --target ${{matrix.target}} --workspace --all-targets --all-features -- -D warnings

  audit-dependencies:
    name: Audit dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: EmbarkStudios/cargo-deny-action@34899fc7ba81ca6268d5947a7a16b4649013fea1
        with:
          arguments: --workspace --all-features
